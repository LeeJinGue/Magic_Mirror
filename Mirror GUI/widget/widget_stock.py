# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_Frame.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from widget import stock_module

class stock(QWidget):
  def __init__(self):
    super().__init__()
  def setupUi(self, Form, x, y,user_id):
        self.user_id = user_id
        self.widget_border = QtWidgets.QLabel(Form)
        self.widget_border.setGeometry(QtCore.QRect(x+20, y+60, 480, 250))
        self.widget_border.setFrameShape(QtWidgets.QFrame.Box)
        self.widget_border.setText("")
        self.widget_border.setObjectName("widget_border")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(x+25, y+65, 470, 240))
        self.listWidget.setObjectName("listWidget")
        #self.listWidget.setStyleSheet("QListWidget::item { border: 0px solid red }")
        self.listWidget.setStyleSheet( "QListWidget{background: black;}")
        self.retranslatesStock(Form)
    
        self.get_stock()


        QtCore.QMetaObject.connectSlotsByName(Form)
        


  def retranslatesStock(self, Form):
      _translate = QtCore.QCoreApplication.translate

  def get_stock(self):
    data = stock_module.get_stock(self.user_id)
    if(len(data)!=0):
      for i in data:
        self.addStock(i)
      

  def addStock(self,data):
   print("아이템 추가")
  #  print(data)
   def get_item_wight():
    layout_main = QHBoxLayout()
    map1 = QLabel()
    map1.setStyleSheet( "QLabel{color: white;}")
    map1.setFixedWidth(150)
    map1.setFixedHeight(60)
    map1.setStyleSheet("""color: #FFFFFF; 
                                        background-color: #000000;
                                        border-style: solid; 
                                        border-width: 1px; 
                                        border-color: #FFFFFF; 
                                        border-radius: 0px;
                                        font: 13pt """)
    map1.setText(data[2])
    layout_main.addWidget(map1)
    
    map2 = QLabel()
    map2.setStyleSheet( "QLabel{color: white;}")
    map2.setFixedWidth(150)
    map2.setFixedHeight(60)
    map2.setStyleSheet("""color: #FFFFFF; 
                                        background-color: #000000;
                                        border-style: solid; 
                                        border-width: 1px; 
                                        border-color: #FFFFFF; 
                                        border-radius: 0px;
                                        font: 13pt """)
    map2.setText(str(data[1]))
    layout_main.addWidget(map2)

    map3 = QLabel()
    map3.setStyleSheet( "QLabel{color: white;}")
    map3.setFixedWidth(150)
    map3.setFixedHeight(60)
    map3.setStyleSheet("""color: #FFFFFF; 
                                        background-color: #000000;
                                        border-style: solid; 
                                        border-width: 1px; 
                                        border-color: #FFFFFF; 
                                        border-radius: 0px;
                                        font: 13pt """)
    if data[0] <= data[1]:
      p = round((data[1]-data[0])/data[1]*100,2)
      map3.setText("▲"+str(data[1]-data[0]) + '\n'+ str(p) +'%')
      layout_main.addWidget(map3)
      wight = QWidget()
      wight.setLayout(layout_main)
    else:
      p = round((data[0]-data[1])/data[0]*100,2)
      map3.setText("▼"+str(data[0]-data[1]) + '\n'+ str(p) +'%')
      layout_main.addWidget(map3)
      wight = QWidget()
      wight.setLayout(layout_main)
      pass
    return wight #   wight

   item = QListWidgetItem() #   QListWidgetItem  
   item.setSizeHint(QSize(200, 80)) #   QListWidgetItem 
   brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
   item.setBackground(brush)
   
   widget = get_item_wight() #            
   self.listWidget.addItem(item) #   item
   self.listWidget.setItemWidget(item, widget) #  item  widget